(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{366:function(t,s,a){t.exports=a.p+"assets/img/DOM-Level.adad9a15.png"},388:function(t,s,a){"use strict";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("DOM 全称 Document Object Model（文档对象模型），定义了和平台无关的事件、节点树的模型等内容，它只是一种模型，DOM 规范是对这种模型的描述。它告诉我们该如何对文档进行访问和修改。这种模型适用于 HTML 和 XML 类型的文档。")]),t._v(" "),n("p",[t._v("DOM 模型用一个树结构来表示一个文档，树的每个分支的终点都是一个节点 (node)，每个节点都是包含属性和方法的对象 (objects)。DOM 的方法 (methods) 让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。")]),t._v(" "),n("p",[t._v("前端平时常说的 DOM 对象其实是通过 JS 对 DOM 规范 (API) 中具体接口 (interface) 的一种实现，"),n("strong",[t._v("DOM 对象就是 JS 对象，也是使用原型继承，也拥有 JS 对象的其他特点")]),t._v("。")]),t._v(" "),n("p",[t._v("DOM 曾经使用 Level 来命名，一直到 Level 3，标准文件维护在 "),n("a",{attrs:{href:"https://www.w3.org/TR/?title=dom",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3c 网站"),n("OutboundLink")],1),t._v("。Level 4 时修改为 DOM Standard，维护在 "),n("a",{attrs:{href:"https://dom.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WHATWG 网站"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(366),alt:""}})]),t._v(" "),n("p",[t._v("DOM Standard 大致内容如下：")]),t._v(" "),n("ol",[n("li",[t._v("Infrastructure 介绍了 DOM 标准中的一些基本概念和术语")]),t._v(" "),n("li",[t._v("Events（事件）")]),t._v(" "),n("li",[t._v("Aborting ongoing activities（终止正在进行的活动）")]),t._v(" "),n("li",[t._v("Nodes（节点）")]),t._v(" "),n("li",[t._v("Ranges（范围）")]),t._v(" "),n("li",[t._v("Traversal（遍历）")]),t._v(" "),n("li",[t._v("Sets（DOMTokenList）")]),t._v(" "),n("li",[t._v("XPath（XML 路径语言）")]),t._v(" "),n("li",[t._v("XSLT（XSL 转换）")]),t._v(" "),n("li",[t._v("Historical（历史：废弃的接口）")])]),t._v(" "),n("h2",{attrs:{id:"_1-infrastructure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-infrastructure"}},[t._v("#")]),t._v(" 1. Infrastructure")]),t._v(" "),n("p",[n("strong",[t._v("Trees")]),t._v("：")]),t._v(" "),n("p",[t._v("主要讲了树的定义、特征，以及节点的特征、节点间的关系。定义了后面几个章节使用到的一些名词。")]),t._v(" "),n("ul",[n("li",[t._v("所谓 tree 是一个有限层次的树形结构，遍历顺序为先序深度优先遍历；")]),t._v(" "),n("li",[t._v("tree 中的节点都是对象，上有父节点 (parent)，下有子节点 (children)；")]),t._v(" "),n("li",[t._v("根节点 (root) 的 parent 是 null；")]),t._v(" "),n("li",[t._v("如果节点 A 是 B 的子节点 (child)，或者 C 是 B 的子节点 (child) 而 A 是 C 的子节点 (child)，那么称作 A 是 B 的后代元素 (descendant)；")]),t._v(" "),n("li",[t._v("当且仅当 A 是 B 的后代元素 (descendant) 时，节点 B 才称为节点 A 的祖先元素 (ancestor)；")]),t._v(" "),n("li",[t._v("当且仅当 A 与 B 拥有同一个不为 null 的父节点时，A、B 节点互称为兄弟节点 (sibling)；")]),t._v(" "),n("li",[t._v("......")])]),t._v(" "),n("p",[n("strong",[t._v("Ordered sets")]),t._v("：todo")]),t._v(" "),n("p",[n("strong",[t._v("Selectors")]),t._v("：todo")]),t._v(" "),n("p",[n("strong",[t._v("Namespaces")]),t._v("：todo")]),t._v(" "),n("h2",{attrs:{id:"_2-events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-events"}},[t._v("#")]),t._v(" 2. Events")]),t._v(" "),n("p",[t._v("在 Web 中，事件的作用是给对象 (object) 发送信号，通知对象某件事情（请求、交互等）的发生，对象通过 EventTarget 对象上的 addEventListener 方法来观察到事件的发生，通过 removeEventListener 方法来取消观察（Web 请求事件还可以通过 AbortSignal 的 abort() 方法取消观察）。")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("Event")]),t._v("：事件对象。表示事件本身，Event 对象提供了一些属性和方法，包含了事件本身的各种信息。Event 本身也是构造函数，可以用来生成新的实例，所有的事件都是这个对象的实例。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" event "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成新实例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// options 支持三个字段：composed、cancelable、bubbles")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'look'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bubbles'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cancelable'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("ul",[n("li",[t._v("Event.type 事件类型，不分大小写")]),t._v(" "),n("li",[t._v("Event.target 事件的原始触发节点")]),t._v(" "),n("li",[t._v("Event.currentTarget 事件当前通过的节点")]),t._v(" "),n("li",[t._v("Event.bubbles 是否可冒泡")]),t._v(" "),n("li",[t._v("Event.eventPhase 事件流所处阶段，0 到 4 分别表示没事件、捕获阶段、在 target、冒泡阶段")]),t._v(" "),n("li",[t._v("Event.cancelable 事件是否可取消")]),t._v(" "),n("li",[t._v("Event.cancelBubble 读写，是否可冒泡，是 Event.stopPropagation() 的历史别名")]),t._v(" "),n("li",[t._v("Event.composed 事件冒泡是否可以穿越 shadow dom 和常规 dom 的边界")]),t._v(" "),n("li",[t._v("Event.defaultPrevented 是否调用过 event.preventDefault() 取消事件")]),t._v(" "),n("li",[t._v("Event.returnValue 读写是否被取消，由 ie 引入为了兼容所以引入标准但不建议使用")]),t._v(" "),n("li",[t._v("Event.timeStamp 事件创建时的时间戳，相对于网页加载成功开始计算")]),t._v(" "),n("li",[t._v("Event.isTrusted 表示是由用户触发 (true) 还是脚本触发 (false)")])]),t._v(" "),n("p",[n("strong",[t._v("CustomEvent")]),t._v("：自定义事件对象。继承自 Event 对象，可自定义事件的信息，传递指定的数据。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加一个事件监听器")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// detail 表示自定义的数据")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" customEvent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"detail"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cute"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 脚本触发事件")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customEvent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[n("strong",[t._v("EventTarget")]),t._v("：一个用来接收事件、创建侦听器的对象。")]),t._v(" "),n("p",[t._v("由于 DOM 的节点都需要有接收事件的功能，所以 EventTarget 被设计在了 DOM 对象原型链的最末端。")]),t._v(" "),n("p",[t._v("EventTarget 主要有三个方法：")]),t._v(" "),n("ul",[n("li",[t._v("addEventListener()：绑定事件的监听函数")]),t._v(" "),n("li",[t._v("removeEventListener()：移除事件的监听函数")]),t._v(" "),n("li",[t._v("dispatchEvent()：触发事件")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),n("p",[t._v("dispatchEvent 方法触发的事件"),n("strong",[t._v("同步执行")]),t._v("，用户触发的事件"),n("strong",[t._v("异步执行")]),t._v("。")])]),t._v(" "),n("h2",{attrs:{id:"_3-aborting-ongoing-activities-终止正在进行的活动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-aborting-ongoing-activities-终止正在进行的活动"}},[t._v("#")]),t._v(" 3. Aborting ongoing activities（终止正在进行的活动）")]),t._v(" "),n("p",[t._v("Promise 内部没有提供取消机制，但有时我们又确实需要用到取消机制，所以 DOM 中提供了 AbortController 控制器对象，允许你根据需要中止一个或多个 Web 请求。")]),t._v(" "),n("p",[t._v("目前 Fetch API 已经实现了这个规范。下面是 Promise 中使用控制器对象的一个示例：")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" controller "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbortController")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" controller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("signal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("startSpinner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AbortError'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("showUserErrorMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopSpinner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// …")]),t._v("\n\ncontroller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("abort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("h2",{attrs:{id:"_4-nodes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-nodes"}},[t._v("#")]),t._v(" 4. Nodes")]),t._v(" "),n("p",[t._v("DOM 是一种访问和操作文档的 API。其中“文档”不仅限于 HTML 文档，适用于任何标记语言的文档。每个文档都可以表示为一个节点树 (Node Tree)，树中的一些节点 (Node) 可以有子节点 (children)，没有子节点的称为叶子节点 (leaves)。")]),t._v(" "),n("h3",{attrs:{id:"node-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-tree"}},[t._v("#")]),t._v(" Node Tree")]),t._v(" "),n("p",[t._v("节点对象 (Node) 组成的 tree 就叫 Node Tree。")]),t._v(" "),n("p",[t._v("节点有以下几种类型：")]),t._v(" "),n("ul",[n("li",[t._v("Document\n"),n("ul",[n("li",[t._v("所包含的节点在 Node Tree 中需要按以下顺序排列")])]),t._v(" "),n("ol",[n("li",[t._v("零个或多个 ProcessingInstruction / Comment 节点。")]),t._v(" "),n("li",[t._v("零个或一个 DocumentType 节点.")]),t._v(" "),n("li",[t._v("零个或多个 ProcessingInstruction / Comment 节点。")]),t._v(" "),n("li",[t._v("零个或一个 Element 节点。")]),t._v(" "),n("li",[t._v("零个或多个 ProcessingInstruction / Comment 节点。")])])]),t._v(" "),n("li",[t._v("DocumentFragment")]),t._v(" "),n("li",[t._v("Element\n"),n("ul",[n("li",[t._v("可包含零个或多个 Element / CharacterData 节点。")])])]),t._v(" "),n("li",[t._v("DocumentType")]),t._v(" "),n("li",[t._v("CharacterData")]),t._v(" "),n("li",[t._v("Attr\n"),n("ul",[n("li",[t._v("不能有子节点。")])])])]),t._v(" "),n("p",[t._v("根节点类型不同，组成的 Node Tree 的类型也不同。")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Document tree")]),t._v("：根节点 (root) 类型 document。")]),t._v(" "),n("li",[n("strong",[t._v("Shadow tree")]),t._v("：根节点 (root) 类型是 document。")])]),t._v(" "),n("h3",{attrs:{id:"mutation-observers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutation-observers"}},[t._v("#")]),t._v(" Mutation observers")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-2"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("Node")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("Document")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("DocumentType")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("DocumentFragment")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("ShadowRoot")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("Element")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("CharacterData")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("Text")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("CDATASection")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("ProcessingInstruction")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("Comment")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_5-ranges"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-ranges"}},[t._v("#")]),t._v(" 5. Ranges")]),t._v(" "),n("p",[t._v("StaticRange、Range 都表示一个 node tree 中有起点和终点的一段内容。通常用来选择和复制文档中的一段内容。")]),t._v(" "),n("h3",{attrs:{id:"boundary-points-边界点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#boundary-points-边界点"}},[t._v("#")]),t._v(" Boundary points（边界点）")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-3"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("AbstractRange")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("StaticRange")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("Range")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_6-traversal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-traversal"}},[t._v("#")]),t._v(" 6. Traversal")]),t._v(" "),n("p",[t._v("迭代和筛选 node tree。")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-4"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("NodeIterator")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("TreeWalker")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("NodeFilter")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_7-sets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-sets"}},[t._v("#")]),t._v(" 7. Sets")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-5"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("DOMTokenList")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_8-xpath-xml-路径语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-xpath-xml-路径语言"}},[t._v("#")]),t._v(" 8. XPath（XML 路径语言）")]),t._v(" "),n("p",[t._v("XPath 的意思是 XML 路径语言。XPath 主要被用于 XSLT（XML 文档转换），也可用于定位文档元素。XPath 使用路径标识符通过层级结构来导航 XML 文档。它使用非 XML 语法，以致于它可以被用在 URIs 和 XML 属性值上。")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-6"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("XPathResult")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("XPathExpression")]),t._v("：")]),t._v(" "),n("p",[n("strong",[t._v("XPathEvaluator")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_9-xslt-xsl-转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-xslt-xsl-转换"}},[t._v("#")]),t._v(" 9. XSLT（XSL 转换）")]),t._v(" "),n("p",[t._v("XSL Transformations（XSLT）是一种用于将 XML 文档转换为其他 XML 文档的语言。")]),t._v(" "),n("h3",{attrs:{id:"具体接口-interface-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体接口-interface-7"}},[t._v("#")]),t._v(" 具体接口 (interface)")]),t._v(" "),n("p",[n("strong",[t._v("XSLTProcessor")]),t._v("：")]),t._v(" "),n("h2",{attrs:{id:"_10-historical-历史-废弃的接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-historical-历史-废弃的接口"}},[t._v("#")]),t._v(" 10. Historical（历史：废弃的接口）")])])}),[],!1,null,null,null);s.default=e.exports}}]);